// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: setup.sql

package database

import (
	"context"
)

const setupFeedFollows = `-- name: SetupFeedFollows :exec
CREATE TABLE IF NOT EXISTS feed_follows(
    id UUID PRIMARY KEY,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    user_id UUID NOT NULL,
    feed_id UUID NOT NULL,
    CONSTRAINT fk_user_follow
        FOREIGN KEY(user_id) 
        REFERENCES users(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_feed_follow
        FOREIGN KEY(feed_id) 
        REFERENCES feeds(id)
        ON DELETE CASCADE,
    UNIQUE(user_id, feed_id)
)
`

func (q *Queries) SetupFeedFollows(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setupFeedFollows)
	return err
}

const setupFeeds = `-- name: SetupFeeds :exec
CREATE TABLE IF NOT EXISTS feeds(
    id UUID PRIMARY KEY,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    name TEXT NOT NULL,
    url TEXT NOT NULL UNIQUE,
    user_id UUID NOT NULL,
    last_fetched_at TIMESTAMP,
    CONSTRAINT fk_user
        FOREIGN KEY(user_id) 
        REFERENCES users(id)
        ON DELETE CASCADE
)
`

func (q *Queries) SetupFeeds(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setupFeeds)
	return err
}

const setupPosts = `-- name: SetupPosts :exec
CREATE TABLE IF NOT EXISTS posts (
    id UUID PRIMARY KEY,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    title TEXT NOT NULL,
    url TEXT NOT NULL UNIQUE,
    description TEXT NOT NULL,
    published_at TIMESTAMP,
    feed_id UUID NOT NULL,
    CONSTRAINT fk_feed
        FOREIGN KEY(feed_id) 
        REFERENCES feeds(id)
        ON DELETE CASCADE
)
`

func (q *Queries) SetupPosts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setupPosts)
	return err
}

const setupUsers = `-- name: SetupUsers :exec
CREATE TABLE IF NOT EXISTS users(
    id UUID PRIMARY KEY,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP NOT NULL,
    name TEXT NOT NULL UNIQUE
)
`

func (q *Queries) SetupUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setupUsers)
	return err
}
